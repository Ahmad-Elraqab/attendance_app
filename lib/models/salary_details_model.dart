import 'package:attendance_app/models/earning_model.dart';

class SalaryDetailsModel {
  String? name,
      owner,
      creation,
      modified,
      modifiedBy,
      postingDate,
      employee,
      employeeName,
      department,
      status,
      company,
      currency,
      letterHead,
      startDate,
      endDate,
      salaryStructure,
      payrollFrequency,
      bankName,
      bankAccount_no,
      modeOfPayment,
      totalInWords,
      baseTotalInWords,
      doctype;
  int? deductTaxForUnclaimedEmployeeBenefits,
      deductTaxForUnsubmittedTaxExemptionProof,
      idx,
      salarySlipBasedOnTimesheet,
      docstatus;

  double? exchangeRate,
      totalWorkingDays,
      unmarkedDays,
      leaveWithoutPay,
      absentDays,
      paymentDays,
      totalWorkingHours,
      hourRate,
      baseHourRate,
      grossPay,
      baseGrossPay,
      grossYearToDate,
      baseGrossYearToDate,
      totalDeduction,
      baseTotalDeduction,
      totalPrincipalAmount,
      totalInterestAmount,
      totalLoanRepayment,
      netPay,
      baseNetPay,
      yearToDate,
      baseYearToDate,
      roundedTotal,
      baseRoundedTotal,
      monthToDate,
      baseMonthToDate;

  List? timesheets, deductions, loans, leaveDetails;

  List<EarningModel>? earnings;

  SalaryDetailsModel({
    this.name,
    this.owner,
    this.creation,
    this.modified,
    this.modifiedBy,
    this.postingDate,
    this.employee,
    this.employeeName,
    this.department,
    this.status,
    this.company,
    this.currency,
    this.letterHead,
    this.startDate,
    this.endDate,
    this.salaryStructure,
    this.payrollFrequency,
    this.bankName,
    this.bankAccount_no,
    this.modeOfPayment,
    this.totalInWords,
    this.baseTotalInWords,
    this.doctype,
    this.deductTaxForUnclaimedEmployeeBenefits,
    this.deductTaxForUnsubmittedTaxExemptionProof,
    this.idx,
    this.salarySlipBasedOnTimesheet,
    this.docstatus,
    this.exchangeRate,
    this.totalWorkingDays,
    this.unmarkedDays,
    this.leaveWithoutPay,
    this.absentDays,
    this.paymentDays,
    this.totalWorkingHours,
    this.hourRate,
    this.baseHourRate,
    this.grossPay,
    this.baseGrossPay,
    this.grossYearToDate,
    this.baseGrossYearToDate,
    this.totalDeduction,
    this.baseTotalDeduction,
    this.totalPrincipalAmount,
    this.totalInterestAmount,
    this.totalLoanRepayment,
    this.netPay,
    this.baseNetPay,
    this.yearToDate,
    this.baseYearToDate,
    this.roundedTotal,
    this.baseRoundedTotal,
    this.monthToDate,
    this.baseMonthToDate,
    this.timesheets,
    this.earnings,
    this.deductions,
    this.loans,
    this.leaveDetails,
  });

  factory SalaryDetailsModel.fromJson(Map<String, dynamic> json) =>
      SalaryDetailsModel(
        name: json['name'],
        owner: json['owner'],
        creation: json['creation'],
        modified: json['modified'],
        modifiedBy: json['modified_by'],
        postingDate: json['posting_date'],
        employee: json['employee'],
        employeeName: json['employee_name'],
        department: json['department'],
        status: json['status'],
        company: json['company'],
        currency: json['currency'],
        letterHead: json['letter_head'],
        startDate: json['start_date'],
        endDate: json['end_date'],
        salaryStructure: json['salary_structure'],
        payrollFrequency: json['payroll_frequency'],
        bankName: json['bank_name'],
        bankAccount_no: json['bank_account_no'],
        modeOfPayment: json['mode_of_payment'],
        totalInWords: json['total_in_words'],
        baseTotalInWords: json['base_total_in_words'],
        doctype: json['doctype'],
        deductTaxForUnclaimedEmployeeBenefits:
            json['deduct_tax_for_unclaimed_employee_benefits'],
        deductTaxForUnsubmittedTaxExemptionProof:
            json['deduct_tax_for_unsubmitted_tax_exemption_proof'],
        idx: json['idx'],
        salarySlipBasedOnTimesheet: json['salary_slip_based_on_timesheet'],
        docstatus: json['docstatus'],
        exchangeRate: json['exchange_rate'],
        totalWorkingDays: json['total_working_days'],
        unmarkedDays: json['unmarked_days'],
        leaveWithoutPay: json['leave_without_pay'],
        absentDays: json['absent_days'],
        paymentDays: json['payment_days'],
        totalWorkingHours: json['total_working_hours'],
        hourRate: json['hour_rate'],
        baseHourRate: json['base_hour_rate'],
        grossPay: json['gross_pay'],
        baseGrossPay: json['base_gross_pay'],
        grossYearToDate: json['gross_year_to_date'],
        baseGrossYearToDate: json['base_gross_year_to_date'],
        totalDeduction: json['total_deduction'],
        baseTotalDeduction: json['base_total_deduction'],
        totalPrincipalAmount: json['total_principal_amount'],
        totalInterestAmount: json['total_interest_amount'],
        totalLoanRepayment: json['total_loan_repayment'],
        netPay: json['net_pay'],
        baseNetPay: json['base_net_pay'],
        yearToDate: json['year_to_date'],
        baseYearToDate: json['base_year_to_date'],
        roundedTotal: json['rounded_total'],
        baseRoundedTotal: json['base_rounded_total'],
        monthToDate: json['month_to_date'],
        baseMonthToDate: json['base_month_to_date'],
        timesheets: json['timesheets'],
        earnings: (json['earnings'] as List)
            .map((e) => EarningModel.formJson(e))
            .toList(),
        deductions: json['deductions'],
        loans: json['loans'],
        leaveDetails: json['leave_details'],
      );
}
